// This file is auto-generated by @hey-api/openapi-ts

import type {
  CreateAccidentDataApiV1AccidentDataPostResponse,
  CreateAccidentRecordApiV1AllAccidentsDataPostResponse,
  CreateCommodityApiV1CommoditiesPostResponse,
  CreateLocationApiV1LocationsPostResponse,
  CreatePriceRecordApiV1PricesPostResponse,
  CreateRegionApiV1RegionsPostResponse,
  CreateUserApiV1UsersPostResponse,
  GetAccidentByIdApiV1AllAccidentsDataUIdGetResponse,
  GetAccidentDataApiV1AccidentDataGetResponse,
  GetAccidentDataByYearApiV1AccidentDataYearGetResponse,
  GetAllAccidentsDataApiV1AllAccidentsDataGetResponse,
  ReadCommoditiesApiV1CommoditiesGetResponse,
  ReadCommodityApiV1CommoditiesIdGetResponse,
  ReadLocationApiV1LocationsIdGetResponse,
  ReadLocationsApiV1LocationsGetResponse,
  ReadPriceRecordApiV1PricesIdGetResponse,
  ReadPriceRecordsApiV1PricesGetResponse,
  ReadRegionApiV1RegionsIdGetResponse,
  ReadRegionPricesApiV1RegionsIdPricesGetResponse,
  ReadRegionsApiV1RegionsGetResponse,
  ReadUserApiV1UsersIdGetResponse,
  ReadUsersApiV1UsersGetResponse,
  UpdateAccidentDataApiV1AccidentDataYearPutResponse,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutResponse,
  UpdateCommodityApiV1CommoditiesIdPutResponse,
  UpdateLocationApiV1LocationsIdPutResponse,
  UpdatePriceRecordApiV1PricesIdPutResponse,
} from "./types.gen";

const userSchemaResponseTransformer = (data: any) => {
  data.created_at = new Date(data.created_at);
  return data;
};

export const readUsersApiV1UsersGetResponseTransformer = async (
  data: any
): Promise<ReadUsersApiV1UsersGetResponse> => {
  data = data.map((item: any) => {
    return userSchemaResponseTransformer(item);
  });
  return data;
};

export const createUserApiV1UsersPostResponseTransformer = async (
  data: any
): Promise<CreateUserApiV1UsersPostResponse> => {
  data = userSchemaResponseTransformer(data);
  return data;
};

export const readUserApiV1UsersIdGetResponseTransformer = async (
  data: any
): Promise<ReadUserApiV1UsersIdGetResponse> => {
  data = userSchemaResponseTransformer(data);
  return data;
};

const commoditySchemaResponseTransformer = (data: any) => {
  data.createdAt = new Date(data.createdAt);
  return data;
};

export const readCommoditiesApiV1CommoditiesGetResponseTransformer = async (
  data: any
): Promise<ReadCommoditiesApiV1CommoditiesGetResponse> => {
  data = data.map((item: any) => {
    return commoditySchemaResponseTransformer(item);
  });
  return data;
};

export const createCommodityApiV1CommoditiesPostResponseTransformer = async (
  data: any
): Promise<CreateCommodityApiV1CommoditiesPostResponse> => {
  data = commoditySchemaResponseTransformer(data);
  return data;
};

const commodityDetailSchemaResponseTransformer = (data: any) => {
  data.createdAt = new Date(data.createdAt);
  return data;
};

export const readCommodityApiV1CommoditiesIdGetResponseTransformer = async (
  data: any
): Promise<ReadCommodityApiV1CommoditiesIdGetResponse> => {
  data = commodityDetailSchemaResponseTransformer(data);
  return data;
};

export const updateCommodityApiV1CommoditiesIdPutResponseTransformer = async (
  data: any
): Promise<UpdateCommodityApiV1CommoditiesIdPutResponse> => {
  data = commoditySchemaResponseTransformer(data);
  return data;
};

const regionSchemaResponseTransformer = (data: any) => {
  data.created_at = new Date(data.created_at);
  return data;
};

export const readRegionsApiV1RegionsGetResponseTransformer = async (
  data: any
): Promise<ReadRegionsApiV1RegionsGetResponse> => {
  data = data.map((item: any) => {
    return regionSchemaResponseTransformer(item);
  });
  return data;
};

export const createRegionApiV1RegionsPostResponseTransformer = async (
  data: any
): Promise<CreateRegionApiV1RegionsPostResponse> => {
  data = regionSchemaResponseTransformer(data);
  return data;
};

export const readRegionApiV1RegionsIdGetResponseTransformer = async (
  data: any
): Promise<ReadRegionApiV1RegionsIdGetResponse> => {
  data = regionSchemaResponseTransformer(data);
  return data;
};

const locationSchemaResponseTransformer = (data: any) => {
  data.created_at = new Date(data.created_at);
  if (data.updated_at) {
    data.updated_at = new Date(data.updated_at);
  }
  return data;
};

const priceRecordSchemaResponseTransformer = (data: any) => {
  data.recorded_at = new Date(data.recorded_at);
  data.created_at = new Date(data.created_at);
  if (data.location) {
    data.location = locationSchemaResponseTransformer(data.location);
  }
  return data;
};

export const readRegionPricesApiV1RegionsIdPricesGetResponseTransformer = async (
  data: any
): Promise<ReadRegionPricesApiV1RegionsIdPricesGetResponse> => {
  data = data.map((item: any) => {
    return priceRecordSchemaResponseTransformer(item);
  });
  return data;
};

export const readPriceRecordsApiV1PricesGetResponseTransformer = async (
  data: any
): Promise<ReadPriceRecordsApiV1PricesGetResponse> => {
  data = data.map((item: any) => {
    return priceRecordSchemaResponseTransformer(item);
  });
  return data;
};

export const createPriceRecordApiV1PricesPostResponseTransformer = async (
  data: any
): Promise<CreatePriceRecordApiV1PricesPostResponse> => {
  data = priceRecordSchemaResponseTransformer(data);
  return data;
};

export const readPriceRecordApiV1PricesIdGetResponseTransformer = async (
  data: any
): Promise<ReadPriceRecordApiV1PricesIdGetResponse> => {
  data = priceRecordSchemaResponseTransformer(data);
  return data;
};

export const updatePriceRecordApiV1PricesIdPutResponseTransformer = async (
  data: any
): Promise<UpdatePriceRecordApiV1PricesIdPutResponse> => {
  data = priceRecordSchemaResponseTransformer(data);
  return data;
};

export const readLocationsApiV1LocationsGetResponseTransformer = async (
  data: any
): Promise<ReadLocationsApiV1LocationsGetResponse> => {
  data = data.map((item: any) => {
    return locationSchemaResponseTransformer(item);
  });
  return data;
};

export const createLocationApiV1LocationsPostResponseTransformer = async (
  data: any
): Promise<CreateLocationApiV1LocationsPostResponse> => {
  data = locationSchemaResponseTransformer(data);
  return data;
};

export const readLocationApiV1LocationsIdGetResponseTransformer = async (
  data: any
): Promise<ReadLocationApiV1LocationsIdGetResponse> => {
  data = locationSchemaResponseTransformer(data);
  return data;
};

export const updateLocationApiV1LocationsIdPutResponseTransformer = async (
  data: any
): Promise<UpdateLocationApiV1LocationsIdPutResponse> => {
  data = locationSchemaResponseTransformer(data);
  return data;
};

const accidentDataSchemaResponseTransformer = (data: any) => {
  data.created_at = new Date(data.created_at);
  if (data.last_updated) {
    data.last_updated = new Date(data.last_updated);
  }
  return data;
};

export const getAccidentDataApiV1AccidentDataGetResponseTransformer = async (
  data: any
): Promise<GetAccidentDataApiV1AccidentDataGetResponse> => {
  data = data.map((item: any) => {
    return accidentDataSchemaResponseTransformer(item);
  });
  return data;
};

export const createAccidentDataApiV1AccidentDataPostResponseTransformer = async (
  data: any
): Promise<CreateAccidentDataApiV1AccidentDataPostResponse> => {
  data = accidentDataSchemaResponseTransformer(data);
  return data;
};

export const getAccidentDataByYearApiV1AccidentDataYearGetResponseTransformer = async (
  data: any
): Promise<GetAccidentDataByYearApiV1AccidentDataYearGetResponse> => {
  data = accidentDataSchemaResponseTransformer(data);
  return data;
};

export const updateAccidentDataApiV1AccidentDataYearPutResponseTransformer = async (
  data: any
): Promise<UpdateAccidentDataApiV1AccidentDataYearPutResponse> => {
  data = accidentDataSchemaResponseTransformer(data);
  return data;
};

const allAccidentsDataSchemaResponseTransformer = (data: any) => {
  if (data.accidentDatetimeFromUrl) {
    data.accidentDatetimeFromUrl = new Date(data.accidentDatetimeFromUrl);
  }
  if (data.accidentDate) {
    data.accidentDate = new Date(data.accidentDate);
  }
  return data;
};

export const getAllAccidentsDataApiV1AllAccidentsDataGetResponseTransformer = async (
  data: any
): Promise<GetAllAccidentsDataApiV1AllAccidentsDataGetResponse> => {
  data = data.map((item: any) => {
    return allAccidentsDataSchemaResponseTransformer(item);
  });
  return data;
};

export const createAccidentRecordApiV1AllAccidentsDataPostResponseTransformer = async (
  data: any
): Promise<CreateAccidentRecordApiV1AllAccidentsDataPostResponse> => {
  data = allAccidentsDataSchemaResponseTransformer(data);
  return data;
};

export const getAccidentByIdApiV1AllAccidentsDataUIdGetResponseTransformer = async (
  data: any
): Promise<GetAccidentByIdApiV1AllAccidentsDataUIdGetResponse> => {
  data = allAccidentsDataSchemaResponseTransformer(data);
  return data;
};

export const updateAccidentRecordApiV1AllAccidentsDataUIdPutResponseTransformer = async (
  data: any
): Promise<UpdateAccidentRecordApiV1AllAccidentsDataUIdPutResponse> => {
  data = allAccidentsDataSchemaResponseTransformer(data);
  return data;
};
