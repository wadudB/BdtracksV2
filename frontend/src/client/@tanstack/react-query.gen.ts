// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  createAccidentDataApiV1AccidentDataPost,
  createAccidentRecordApiV1AllAccidentsDataPost,
  createCommodityApiV1CommoditiesPost,
  createLocationApiV1LocationsPost,
  createPriceRecordApiV1PricesPost,
  createRegionApiV1RegionsPost,
  createUserApiV1UsersPost,
  deleteAccidentDataApiV1AccidentDataYearDelete,
  deleteAccidentRecordApiV1AllAccidentsDataUIdDelete,
  deleteCommodityApiV1CommoditiesIdDelete,
  deleteLocationApiV1LocationsIdDelete,
  deletePriceRecordApiV1PricesIdDelete,
  getAccidentByIdApiV1AllAccidentsDataUIdGet,
  getAccidentDataApiV1AccidentDataGet,
  getAccidentDataByYearApiV1AccidentDataYearGet,
  getAccidentScrapingStatusApiV1AccidentScrapingStatusGet,
  getAllAccidentsCountApiV1AllAccidentsDataCountGet,
  getAllAccidentsDataApiV1AllAccidentsDataGet,
  getCommoditiesForDropdownApiV1CommoditiesDropdownGet,
  getLocationsWithPricesApiV1LocationsWithPricesGet,
  getPriceAnalysisApiV1PriceAnalysisCommodityIdGet,
  getPriceTrendsApiV1AnalyticsTrendsGet,
  getRegionalComparisonApiV1AnalyticsComparisonGet,
  getRegionalPricesApiV1PricesRegionsGet,
  getScrapingStatusApiV1ScraperStatusGet,
  healthCheckHealthcheckGet,
  readCommoditiesApiV1CommoditiesGet,
  readCommodityApiV1CommoditiesIdGet,
  readLocationApiV1LocationsIdGet,
  readLocationsApiV1LocationsGet,
  readPriceRecordApiV1PricesIdGet,
  readPriceRecordsApiV1PricesGet,
  readRegionApiV1RegionsIdGet,
  readRegionPricesApiV1RegionsIdPricesGet,
  readRegionsApiV1RegionsGet,
  readRootGet,
  readUserApiV1UsersIdGet,
  readUsersApiV1UsersGet,
  scrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGet,
  startAccidentScrapingApiV1AccidentScrapingStartPost,
  startTcbScrapingApiV1ScraperStartPost,
  stopAccidentScrapingApiV1AccidentScrapingStopPost,
  stopScrapingApiV1ScraperStopPost,
  updateAccidentDataApiV1AccidentDataYearPut,
  updateAccidentRecordApiV1AllAccidentsDataUIdPut,
  updateCommodityApiV1CommoditiesIdPut,
  updateLocationApiV1LocationsIdPut,
  updatePriceRecordApiV1PricesIdPut,
} from "../sdk.gen";
import { type DefaultError, type UseMutationOptions, queryOptions } from "@tanstack/react-query";
import type {
  CreateAccidentDataApiV1AccidentDataPostData,
  CreateAccidentDataApiV1AccidentDataPostError,
  CreateAccidentDataApiV1AccidentDataPostResponse,
  CreateAccidentRecordApiV1AllAccidentsDataPostData,
  CreateAccidentRecordApiV1AllAccidentsDataPostError,
  CreateAccidentRecordApiV1AllAccidentsDataPostResponse,
  CreateCommodityApiV1CommoditiesPostData,
  CreateCommodityApiV1CommoditiesPostError,
  CreateCommodityApiV1CommoditiesPostResponse,
  CreateLocationApiV1LocationsPostData,
  CreateLocationApiV1LocationsPostError,
  CreateLocationApiV1LocationsPostResponse,
  CreatePriceRecordApiV1PricesPostData,
  CreatePriceRecordApiV1PricesPostError,
  CreatePriceRecordApiV1PricesPostResponse,
  CreateRegionApiV1RegionsPostData,
  CreateRegionApiV1RegionsPostError,
  CreateRegionApiV1RegionsPostResponse,
  CreateUserApiV1UsersPostData,
  CreateUserApiV1UsersPostError,
  CreateUserApiV1UsersPostResponse,
  DeleteAccidentDataApiV1AccidentDataYearDeleteData,
  DeleteAccidentDataApiV1AccidentDataYearDeleteError,
  DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteData,
  DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteError,
  DeleteCommodityApiV1CommoditiesIdDeleteData,
  DeleteCommodityApiV1CommoditiesIdDeleteError,
  DeleteCommodityApiV1CommoditiesIdDeleteResponse,
  DeleteLocationApiV1LocationsIdDeleteData,
  DeleteLocationApiV1LocationsIdDeleteError,
  DeleteLocationApiV1LocationsIdDeleteResponse,
  DeletePriceRecordApiV1PricesIdDeleteData,
  DeletePriceRecordApiV1PricesIdDeleteError,
  DeletePriceRecordApiV1PricesIdDeleteResponse,
  GetAccidentByIdApiV1AllAccidentsDataUIdGetData,
  GetAccidentDataApiV1AccidentDataGetData,
  GetAccidentDataByYearApiV1AccidentDataYearGetData,
  GetAccidentScrapingStatusApiV1AccidentScrapingStatusGetData,
  GetAllAccidentsCountApiV1AllAccidentsDataCountGetData,
  GetAllAccidentsDataApiV1AllAccidentsDataGetData,
  GetCommoditiesForDropdownApiV1CommoditiesDropdownGetData,
  GetLocationsWithPricesApiV1LocationsWithPricesGetData,
  GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetData,
  GetPriceTrendsApiV1AnalyticsTrendsGetData,
  GetRegionalComparisonApiV1AnalyticsComparisonGetData,
  GetRegionalPricesApiV1PricesRegionsGetData,
  GetScrapingStatusApiV1ScraperStatusGetData,
  HealthCheckHealthcheckGetData,
  ReadCommoditiesApiV1CommoditiesGetData,
  ReadCommodityApiV1CommoditiesIdGetData,
  ReadLocationApiV1LocationsIdGetData,
  ReadLocationsApiV1LocationsGetData,
  ReadPriceRecordApiV1PricesIdGetData,
  ReadPriceRecordsApiV1PricesGetData,
  ReadRegionApiV1RegionsIdGetData,
  ReadRegionPricesApiV1RegionsIdPricesGetData,
  ReadRegionsApiV1RegionsGetData,
  ReadRootGetData,
  ReadUserApiV1UsersIdGetData,
  ReadUsersApiV1UsersGetData,
  ScrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetData,
  StartAccidentScrapingApiV1AccidentScrapingStartPostData,
  StartAccidentScrapingApiV1AccidentScrapingStartPostResponse,
  StartTcbScrapingApiV1ScraperStartPostData,
  StartTcbScrapingApiV1ScraperStartPostError,
  StartTcbScrapingApiV1ScraperStartPostResponse,
  StopAccidentScrapingApiV1AccidentScrapingStopPostData,
  StopAccidentScrapingApiV1AccidentScrapingStopPostResponse,
  StopScrapingApiV1ScraperStopPostData,
  StopScrapingApiV1ScraperStopPostResponse,
  UpdateAccidentDataApiV1AccidentDataYearPutData,
  UpdateAccidentDataApiV1AccidentDataYearPutError,
  UpdateAccidentDataApiV1AccidentDataYearPutResponse,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutData,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutError,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutResponse,
  UpdateCommodityApiV1CommoditiesIdPutData,
  UpdateCommodityApiV1CommoditiesIdPutError,
  UpdateCommodityApiV1CommoditiesIdPutResponse,
  UpdateLocationApiV1LocationsIdPutData,
  UpdateLocationApiV1LocationsIdPutError,
  UpdateLocationApiV1LocationsIdPutResponse,
  UpdatePriceRecordApiV1PricesIdPutData,
  UpdatePriceRecordApiV1PricesIdPutError,
  UpdatePriceRecordApiV1PricesIdPutResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const readUsersApiV1UsersGetQueryKey = (options?: Options<ReadUsersApiV1UsersGetData>) =>
  createQueryKey("readUsersApiV1UsersGet", options);

/**
 * Read Users
 * Retrieve users.
 */
export const readUsersApiV1UsersGetOptions = (options?: Options<ReadUsersApiV1UsersGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readUsersApiV1UsersGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readUsersApiV1UsersGetQueryKey(options),
  });
};

export const createUserApiV1UsersPostQueryKey = (options: Options<CreateUserApiV1UsersPostData>) =>
  createQueryKey("createUserApiV1UsersPost", options);

/**
 * Create User
 * Create new user.
 */
export const createUserApiV1UsersPostOptions = (options: Options<CreateUserApiV1UsersPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUserApiV1UsersPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createUserApiV1UsersPostQueryKey(options),
  });
};

/**
 * Create User
 * Create new user.
 */
export const createUserApiV1UsersPostMutation = (
  options?: Partial<Options<CreateUserApiV1UsersPostData>>
): UseMutationOptions<
  CreateUserApiV1UsersPostResponse,
  CreateUserApiV1UsersPostError,
  Options<CreateUserApiV1UsersPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateUserApiV1UsersPostResponse,
    CreateUserApiV1UsersPostError,
    Options<CreateUserApiV1UsersPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createUserApiV1UsersPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readUserApiV1UsersIdGetQueryKey = (options: Options<ReadUserApiV1UsersIdGetData>) =>
  createQueryKey("readUserApiV1UsersIdGet", options);

/**
 * Read User
 * Get user by ID.
 */
export const readUserApiV1UsersIdGetOptions = (options: Options<ReadUserApiV1UsersIdGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readUserApiV1UsersIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readUserApiV1UsersIdGetQueryKey(options),
  });
};

export const readCommoditiesApiV1CommoditiesGetQueryKey = (
  options?: Options<ReadCommoditiesApiV1CommoditiesGetData>
) => createQueryKey("readCommoditiesApiV1CommoditiesGet", options);

/**
 * Read Commodities
 * Retrieve commodities that have price records.
 */
export const readCommoditiesApiV1CommoditiesGetOptions = (
  options?: Options<ReadCommoditiesApiV1CommoditiesGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readCommoditiesApiV1CommoditiesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readCommoditiesApiV1CommoditiesGetQueryKey(options),
  });
};

export const createCommodityApiV1CommoditiesPostQueryKey = (
  options: Options<CreateCommodityApiV1CommoditiesPostData>
) => createQueryKey("createCommodityApiV1CommoditiesPost", options);

/**
 * Create Commodity
 * Create new commodity.
 */
export const createCommodityApiV1CommoditiesPostOptions = (
  options: Options<CreateCommodityApiV1CommoditiesPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createCommodityApiV1CommoditiesPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createCommodityApiV1CommoditiesPostQueryKey(options),
  });
};

/**
 * Create Commodity
 * Create new commodity.
 */
export const createCommodityApiV1CommoditiesPostMutation = (
  options?: Partial<Options<CreateCommodityApiV1CommoditiesPostData>>
): UseMutationOptions<
  CreateCommodityApiV1CommoditiesPostResponse,
  CreateCommodityApiV1CommoditiesPostError,
  Options<CreateCommodityApiV1CommoditiesPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateCommodityApiV1CommoditiesPostResponse,
    CreateCommodityApiV1CommoditiesPostError,
    Options<CreateCommodityApiV1CommoditiesPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createCommodityApiV1CommoditiesPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCommoditiesForDropdownApiV1CommoditiesDropdownGetQueryKey = (
  options?: Options<GetCommoditiesForDropdownApiV1CommoditiesDropdownGetData>
) => createQueryKey("getCommoditiesForDropdownApiV1CommoditiesDropdownGet", options);

/**
 * Get Commodities For Dropdown
 * Get a simplified list of commodities for dropdown selection.
 */
export const getCommoditiesForDropdownApiV1CommoditiesDropdownGetOptions = (
  options?: Options<GetCommoditiesForDropdownApiV1CommoditiesDropdownGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCommoditiesForDropdownApiV1CommoditiesDropdownGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCommoditiesForDropdownApiV1CommoditiesDropdownGetQueryKey(options),
  });
};

/**
 * Delete Commodity
 * Delete an commodity.
 */
export const deleteCommodityApiV1CommoditiesIdDeleteMutation = (
  options?: Partial<Options<DeleteCommodityApiV1CommoditiesIdDeleteData>>
): UseMutationOptions<
  DeleteCommodityApiV1CommoditiesIdDeleteResponse,
  DeleteCommodityApiV1CommoditiesIdDeleteError,
  Options<DeleteCommodityApiV1CommoditiesIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteCommodityApiV1CommoditiesIdDeleteResponse,
    DeleteCommodityApiV1CommoditiesIdDeleteError,
    Options<DeleteCommodityApiV1CommoditiesIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCommodityApiV1CommoditiesIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readCommodityApiV1CommoditiesIdGetQueryKey = (
  options: Options<ReadCommodityApiV1CommoditiesIdGetData>
) => createQueryKey("readCommodityApiV1CommoditiesIdGet", options);

/**
 * Read Commodity
 * Get commodity by ID.
 */
export const readCommodityApiV1CommoditiesIdGetOptions = (
  options: Options<ReadCommodityApiV1CommoditiesIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readCommodityApiV1CommoditiesIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readCommodityApiV1CommoditiesIdGetQueryKey(options),
  });
};

/**
 * Update Commodity
 * Update an commodity.
 */
export const updateCommodityApiV1CommoditiesIdPutMutation = (
  options?: Partial<Options<UpdateCommodityApiV1CommoditiesIdPutData>>
): UseMutationOptions<
  UpdateCommodityApiV1CommoditiesIdPutResponse,
  UpdateCommodityApiV1CommoditiesIdPutError,
  Options<UpdateCommodityApiV1CommoditiesIdPutData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateCommodityApiV1CommoditiesIdPutResponse,
    UpdateCommodityApiV1CommoditiesIdPutError,
    Options<UpdateCommodityApiV1CommoditiesIdPutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCommodityApiV1CommoditiesIdPut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readRegionsApiV1RegionsGetQueryKey = (
  options?: Options<ReadRegionsApiV1RegionsGetData>
) => createQueryKey("readRegionsApiV1RegionsGet", options);

/**
 * Read Regions
 * Retrieve regions.
 */
export const readRegionsApiV1RegionsGetOptions = (
  options?: Options<ReadRegionsApiV1RegionsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readRegionsApiV1RegionsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readRegionsApiV1RegionsGetQueryKey(options),
  });
};

export const createRegionApiV1RegionsPostQueryKey = (
  options: Options<CreateRegionApiV1RegionsPostData>
) => createQueryKey("createRegionApiV1RegionsPost", options);

/**
 * Create Region
 * Create new region.
 */
export const createRegionApiV1RegionsPostOptions = (
  options: Options<CreateRegionApiV1RegionsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createRegionApiV1RegionsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createRegionApiV1RegionsPostQueryKey(options),
  });
};

/**
 * Create Region
 * Create new region.
 */
export const createRegionApiV1RegionsPostMutation = (
  options?: Partial<Options<CreateRegionApiV1RegionsPostData>>
): UseMutationOptions<
  CreateRegionApiV1RegionsPostResponse,
  CreateRegionApiV1RegionsPostError,
  Options<CreateRegionApiV1RegionsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateRegionApiV1RegionsPostResponse,
    CreateRegionApiV1RegionsPostError,
    Options<CreateRegionApiV1RegionsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createRegionApiV1RegionsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readRegionApiV1RegionsIdGetQueryKey = (
  options: Options<ReadRegionApiV1RegionsIdGetData>
) => createQueryKey("readRegionApiV1RegionsIdGet", options);

/**
 * Read Region
 * Get region by ID.
 */
export const readRegionApiV1RegionsIdGetOptions = (
  options: Options<ReadRegionApiV1RegionsIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readRegionApiV1RegionsIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readRegionApiV1RegionsIdGetQueryKey(options),
  });
};

export const readRegionPricesApiV1RegionsIdPricesGetQueryKey = (
  options: Options<ReadRegionPricesApiV1RegionsIdPricesGetData>
) => createQueryKey("readRegionPricesApiV1RegionsIdPricesGet", options);

/**
 * Read Region Prices
 * Get prices for a specific region.
 */
export const readRegionPricesApiV1RegionsIdPricesGetOptions = (
  options: Options<ReadRegionPricesApiV1RegionsIdPricesGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readRegionPricesApiV1RegionsIdPricesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readRegionPricesApiV1RegionsIdPricesGetQueryKey(options),
  });
};

export const readPriceRecordsApiV1PricesGetQueryKey = (
  options?: Options<ReadPriceRecordsApiV1PricesGetData>
) => createQueryKey("readPriceRecordsApiV1PricesGet", options);

/**
 * Read Price Records
 * Retrieve price records with filtering options.
 */
export const readPriceRecordsApiV1PricesGetOptions = (
  options?: Options<ReadPriceRecordsApiV1PricesGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readPriceRecordsApiV1PricesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readPriceRecordsApiV1PricesGetQueryKey(options),
  });
};

export const createPriceRecordApiV1PricesPostQueryKey = (
  options: Options<CreatePriceRecordApiV1PricesPostData>
) => createQueryKey("createPriceRecordApiV1PricesPost", options);

/**
 * Create Price Record
 * Create new price record.
 */
export const createPriceRecordApiV1PricesPostOptions = (
  options: Options<CreatePriceRecordApiV1PricesPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createPriceRecordApiV1PricesPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createPriceRecordApiV1PricesPostQueryKey(options),
  });
};

/**
 * Create Price Record
 * Create new price record.
 */
export const createPriceRecordApiV1PricesPostMutation = (
  options?: Partial<Options<CreatePriceRecordApiV1PricesPostData>>
): UseMutationOptions<
  CreatePriceRecordApiV1PricesPostResponse,
  CreatePriceRecordApiV1PricesPostError,
  Options<CreatePriceRecordApiV1PricesPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreatePriceRecordApiV1PricesPostResponse,
    CreatePriceRecordApiV1PricesPostError,
    Options<CreatePriceRecordApiV1PricesPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createPriceRecordApiV1PricesPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getRegionalPricesApiV1PricesRegionsGetQueryKey = (
  options: Options<GetRegionalPricesApiV1PricesRegionsGetData>
) => createQueryKey("getRegionalPricesApiV1PricesRegionsGet", options);

/**
 * Get Regional Prices
 * Get the most recent price for each region for a specific commodity, with trend analysis
 * based on the specified time window.
 */
export const getRegionalPricesApiV1PricesRegionsGetOptions = (
  options: Options<GetRegionalPricesApiV1PricesRegionsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRegionalPricesApiV1PricesRegionsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getRegionalPricesApiV1PricesRegionsGetQueryKey(options),
  });
};

/**
 * Delete Price Record
 * Delete a price record.
 */
export const deletePriceRecordApiV1PricesIdDeleteMutation = (
  options?: Partial<Options<DeletePriceRecordApiV1PricesIdDeleteData>>
): UseMutationOptions<
  DeletePriceRecordApiV1PricesIdDeleteResponse,
  DeletePriceRecordApiV1PricesIdDeleteError,
  Options<DeletePriceRecordApiV1PricesIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    DeletePriceRecordApiV1PricesIdDeleteResponse,
    DeletePriceRecordApiV1PricesIdDeleteError,
    Options<DeletePriceRecordApiV1PricesIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deletePriceRecordApiV1PricesIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readPriceRecordApiV1PricesIdGetQueryKey = (
  options: Options<ReadPriceRecordApiV1PricesIdGetData>
) => createQueryKey("readPriceRecordApiV1PricesIdGet", options);

/**
 * Read Price Record
 * Get price record by ID.
 */
export const readPriceRecordApiV1PricesIdGetOptions = (
  options: Options<ReadPriceRecordApiV1PricesIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readPriceRecordApiV1PricesIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readPriceRecordApiV1PricesIdGetQueryKey(options),
  });
};

/**
 * Update Price Record
 * Update a price record.
 */
export const updatePriceRecordApiV1PricesIdPutMutation = (
  options?: Partial<Options<UpdatePriceRecordApiV1PricesIdPutData>>
): UseMutationOptions<
  UpdatePriceRecordApiV1PricesIdPutResponse,
  UpdatePriceRecordApiV1PricesIdPutError,
  Options<UpdatePriceRecordApiV1PricesIdPutData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdatePriceRecordApiV1PricesIdPutResponse,
    UpdatePriceRecordApiV1PricesIdPutError,
    Options<UpdatePriceRecordApiV1PricesIdPutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updatePriceRecordApiV1PricesIdPut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readLocationsApiV1LocationsGetQueryKey = (
  options?: Options<ReadLocationsApiV1LocationsGetData>
) => createQueryKey("readLocationsApiV1LocationsGet", options);

/**
 * Read Locations
 * Retrieve locations.
 */
export const readLocationsApiV1LocationsGetOptions = (
  options?: Options<ReadLocationsApiV1LocationsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readLocationsApiV1LocationsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readLocationsApiV1LocationsGetQueryKey(options),
  });
};

export const createLocationApiV1LocationsPostQueryKey = (
  options: Options<CreateLocationApiV1LocationsPostData>
) => createQueryKey("createLocationApiV1LocationsPost", options);

/**
 * Create Location
 * Create new location.
 */
export const createLocationApiV1LocationsPostOptions = (
  options: Options<CreateLocationApiV1LocationsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createLocationApiV1LocationsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createLocationApiV1LocationsPostQueryKey(options),
  });
};

/**
 * Create Location
 * Create new location.
 */
export const createLocationApiV1LocationsPostMutation = (
  options?: Partial<Options<CreateLocationApiV1LocationsPostData>>
): UseMutationOptions<
  CreateLocationApiV1LocationsPostResponse,
  CreateLocationApiV1LocationsPostError,
  Options<CreateLocationApiV1LocationsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateLocationApiV1LocationsPostResponse,
    CreateLocationApiV1LocationsPostError,
    Options<CreateLocationApiV1LocationsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createLocationApiV1LocationsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLocationsWithPricesApiV1LocationsWithPricesGetQueryKey = (
  options: Options<GetLocationsWithPricesApiV1LocationsWithPricesGetData>
) => createQueryKey("getLocationsWithPricesApiV1LocationsWithPricesGet", options);

/**
 * Get Locations With Prices
 * Get locations with recent price data within a geographic range.
 * Returns locations that have price records in the last N days.
 *
 * Categories can be individual database categories or grouped categories:
 * - food: includes agriculture, pulses, vegetables, spices, fish, meat, dairy, grocery, fruits, poultry
 * - energy: includes oil
 * - household: includes stationery, construction
 *
 * Can also filter by specific commodity_id to show only locations with that commodity.
 */
export const getLocationsWithPricesApiV1LocationsWithPricesGetOptions = (
  options: Options<GetLocationsWithPricesApiV1LocationsWithPricesGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLocationsWithPricesApiV1LocationsWithPricesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLocationsWithPricesApiV1LocationsWithPricesGetQueryKey(options),
  });
};

/**
 * Delete Location
 * Delete a location.
 */
export const deleteLocationApiV1LocationsIdDeleteMutation = (
  options?: Partial<Options<DeleteLocationApiV1LocationsIdDeleteData>>
): UseMutationOptions<
  DeleteLocationApiV1LocationsIdDeleteResponse,
  DeleteLocationApiV1LocationsIdDeleteError,
  Options<DeleteLocationApiV1LocationsIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteLocationApiV1LocationsIdDeleteResponse,
    DeleteLocationApiV1LocationsIdDeleteError,
    Options<DeleteLocationApiV1LocationsIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteLocationApiV1LocationsIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readLocationApiV1LocationsIdGetQueryKey = (
  options: Options<ReadLocationApiV1LocationsIdGetData>
) => createQueryKey("readLocationApiV1LocationsIdGet", options);

/**
 * Read Location
 * Get location by ID.
 */
export const readLocationApiV1LocationsIdGetOptions = (
  options: Options<ReadLocationApiV1LocationsIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readLocationApiV1LocationsIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readLocationApiV1LocationsIdGetQueryKey(options),
  });
};

/**
 * Update Location
 * Update a location.
 */
export const updateLocationApiV1LocationsIdPutMutation = (
  options?: Partial<Options<UpdateLocationApiV1LocationsIdPutData>>
): UseMutationOptions<
  UpdateLocationApiV1LocationsIdPutResponse,
  UpdateLocationApiV1LocationsIdPutError,
  Options<UpdateLocationApiV1LocationsIdPutData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateLocationApiV1LocationsIdPutResponse,
    UpdateLocationApiV1LocationsIdPutError,
    Options<UpdateLocationApiV1LocationsIdPutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateLocationApiV1LocationsIdPut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getPriceTrendsApiV1AnalyticsTrendsGetQueryKey = (
  options?: Options<GetPriceTrendsApiV1AnalyticsTrendsGetData>
) => createQueryKey("getPriceTrendsApiV1AnalyticsTrendsGet", options);

/**
 * Get Price Trends
 * Get price trends for analytics with various filtering options.
 */
export const getPriceTrendsApiV1AnalyticsTrendsGetOptions = (
  options?: Options<GetPriceTrendsApiV1AnalyticsTrendsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPriceTrendsApiV1AnalyticsTrendsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPriceTrendsApiV1AnalyticsTrendsGetQueryKey(options),
  });
};

export const getRegionalComparisonApiV1AnalyticsComparisonGetQueryKey = (
  options: Options<GetRegionalComparisonApiV1AnalyticsComparisonGetData>
) => createQueryKey("getRegionalComparisonApiV1AnalyticsComparisonGet", options);

/**
 * Get Regional Comparison
 * Compare prices between regions for a specific commodity.
 */
export const getRegionalComparisonApiV1AnalyticsComparisonGetOptions = (
  options: Options<GetRegionalComparisonApiV1AnalyticsComparisonGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRegionalComparisonApiV1AnalyticsComparisonGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getRegionalComparisonApiV1AnalyticsComparisonGetQueryKey(options),
  });
};

export const getPriceAnalysisApiV1PriceAnalysisCommodityIdGetQueryKey = (
  options: Options<GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetData>
) => createQueryKey("getPriceAnalysisApiV1PriceAnalysisCommodityIdGet", options);

/**
 * Get Price Analysis
 * Get detailed price analysis for a commodity including:
 * - Price volatility
 * - Price trends
 * - Moving averages
 * - Seasonal patterns (if available)
 * - Min/max ranges
 */
export const getPriceAnalysisApiV1PriceAnalysisCommodityIdGetOptions = (
  options: Options<GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPriceAnalysisApiV1PriceAnalysisCommodityIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPriceAnalysisApiV1PriceAnalysisCommodityIdGetQueryKey(options),
  });
};

export const getScrapingStatusApiV1ScraperStatusGetQueryKey = (
  options?: Options<GetScrapingStatusApiV1ScraperStatusGetData>
) => createQueryKey("getScrapingStatusApiV1ScraperStatusGet", options);

/**
 * Get Scraping Status
 * Get current scraping status
 */
export const getScrapingStatusApiV1ScraperStatusGetOptions = (
  options?: Options<GetScrapingStatusApiV1ScraperStatusGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getScrapingStatusApiV1ScraperStatusGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getScrapingStatusApiV1ScraperStatusGetQueryKey(options),
  });
};

export const startTcbScrapingApiV1ScraperStartPostQueryKey = (
  options?: Options<StartTcbScrapingApiV1ScraperStartPostData>
) => createQueryKey("startTcbScrapingApiV1ScraperStartPost", options);

/**
 * Start Tcb Scraping
 * Start TCB commodity price scraping process
 */
export const startTcbScrapingApiV1ScraperStartPostOptions = (
  options?: Options<StartTcbScrapingApiV1ScraperStartPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await startTcbScrapingApiV1ScraperStartPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: startTcbScrapingApiV1ScraperStartPostQueryKey(options),
  });
};

/**
 * Start Tcb Scraping
 * Start TCB commodity price scraping process
 */
export const startTcbScrapingApiV1ScraperStartPostMutation = (
  options?: Partial<Options<StartTcbScrapingApiV1ScraperStartPostData>>
): UseMutationOptions<
  StartTcbScrapingApiV1ScraperStartPostResponse,
  StartTcbScrapingApiV1ScraperStartPostError,
  Options<StartTcbScrapingApiV1ScraperStartPostData>
> => {
  const mutationOptions: UseMutationOptions<
    StartTcbScrapingApiV1ScraperStartPostResponse,
    StartTcbScrapingApiV1ScraperStartPostError,
    Options<StartTcbScrapingApiV1ScraperStartPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await startTcbScrapingApiV1ScraperStartPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const stopScrapingApiV1ScraperStopPostQueryKey = (
  options?: Options<StopScrapingApiV1ScraperStopPostData>
) => createQueryKey("stopScrapingApiV1ScraperStopPost", options);

/**
 * Stop Scraping
 * Stop the current scraping process
 */
export const stopScrapingApiV1ScraperStopPostOptions = (
  options?: Options<StopScrapingApiV1ScraperStopPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stopScrapingApiV1ScraperStopPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stopScrapingApiV1ScraperStopPostQueryKey(options),
  });
};

/**
 * Stop Scraping
 * Stop the current scraping process
 */
export const stopScrapingApiV1ScraperStopPostMutation = (
  options?: Partial<Options<StopScrapingApiV1ScraperStopPostData>>
): UseMutationOptions<
  StopScrapingApiV1ScraperStopPostResponse,
  DefaultError,
  Options<StopScrapingApiV1ScraperStopPostData>
> => {
  const mutationOptions: UseMutationOptions<
    StopScrapingApiV1ScraperStopPostResponse,
    DefaultError,
    Options<StopScrapingApiV1ScraperStopPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await stopScrapingApiV1ScraperStopPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAccidentDataApiV1AccidentDataGetQueryKey = (
  options?: Options<GetAccidentDataApiV1AccidentDataGetData>
) => createQueryKey("getAccidentDataApiV1AccidentDataGet", options);

/**
 * Get Accident Data
 * Retrieve accident data ordered by year descending.
 * This endpoint migrates the functionality from the old Flask /data endpoint.
 */
export const getAccidentDataApiV1AccidentDataGetOptions = (
  options?: Options<GetAccidentDataApiV1AccidentDataGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccidentDataApiV1AccidentDataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccidentDataApiV1AccidentDataGetQueryKey(options),
  });
};

export const createAccidentDataApiV1AccidentDataPostQueryKey = (
  options: Options<CreateAccidentDataApiV1AccidentDataPostData>
) => createQueryKey("createAccidentDataApiV1AccidentDataPost", options);

/**
 * Create Accident Data
 * Create new accident data record.
 */
export const createAccidentDataApiV1AccidentDataPostOptions = (
  options: Options<CreateAccidentDataApiV1AccidentDataPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAccidentDataApiV1AccidentDataPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAccidentDataApiV1AccidentDataPostQueryKey(options),
  });
};

/**
 * Create Accident Data
 * Create new accident data record.
 */
export const createAccidentDataApiV1AccidentDataPostMutation = (
  options?: Partial<Options<CreateAccidentDataApiV1AccidentDataPostData>>
): UseMutationOptions<
  CreateAccidentDataApiV1AccidentDataPostResponse,
  CreateAccidentDataApiV1AccidentDataPostError,
  Options<CreateAccidentDataApiV1AccidentDataPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateAccidentDataApiV1AccidentDataPostResponse,
    CreateAccidentDataApiV1AccidentDataPostError,
    Options<CreateAccidentDataApiV1AccidentDataPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAccidentDataApiV1AccidentDataPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Accident Data
 * Delete accident data for a specific year.
 */
export const deleteAccidentDataApiV1AccidentDataYearDeleteMutation = (
  options?: Partial<Options<DeleteAccidentDataApiV1AccidentDataYearDeleteData>>
): UseMutationOptions<
  unknown,
  DeleteAccidentDataApiV1AccidentDataYearDeleteError,
  Options<DeleteAccidentDataApiV1AccidentDataYearDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteAccidentDataApiV1AccidentDataYearDeleteError,
    Options<DeleteAccidentDataApiV1AccidentDataYearDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAccidentDataApiV1AccidentDataYearDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAccidentDataByYearApiV1AccidentDataYearGetQueryKey = (
  options: Options<GetAccidentDataByYearApiV1AccidentDataYearGetData>
) => createQueryKey("getAccidentDataByYearApiV1AccidentDataYearGet", options);

/**
 * Get Accident Data By Year
 * Get accident data by specific year.
 */
export const getAccidentDataByYearApiV1AccidentDataYearGetOptions = (
  options: Options<GetAccidentDataByYearApiV1AccidentDataYearGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccidentDataByYearApiV1AccidentDataYearGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccidentDataByYearApiV1AccidentDataYearGetQueryKey(options),
  });
};

/**
 * Update Accident Data
 * Update accident data for a specific year.
 */
export const updateAccidentDataApiV1AccidentDataYearPutMutation = (
  options?: Partial<Options<UpdateAccidentDataApiV1AccidentDataYearPutData>>
): UseMutationOptions<
  UpdateAccidentDataApiV1AccidentDataYearPutResponse,
  UpdateAccidentDataApiV1AccidentDataYearPutError,
  Options<UpdateAccidentDataApiV1AccidentDataYearPutData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateAccidentDataApiV1AccidentDataYearPutResponse,
    UpdateAccidentDataApiV1AccidentDataYearPutError,
    Options<UpdateAccidentDataApiV1AccidentDataYearPutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateAccidentDataApiV1AccidentDataYearPut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAllAccidentsDataApiV1AllAccidentsDataGetQueryKey = (
  options?: Options<GetAllAccidentsDataApiV1AllAccidentsDataGetData>
) => createQueryKey("getAllAccidentsDataApiV1AllAccidentsDataGet", options);

/**
 * Get All Accidents Data
 * Retrieve all accidents data with pagination and optional filters.
 * Limited to maximum 50 records per request for performance.
 */
export const getAllAccidentsDataApiV1AllAccidentsDataGetOptions = (
  options?: Options<GetAllAccidentsDataApiV1AllAccidentsDataGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllAccidentsDataApiV1AllAccidentsDataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAllAccidentsDataApiV1AllAccidentsDataGetQueryKey(options),
  });
};

export const createAccidentRecordApiV1AllAccidentsDataPostQueryKey = (
  options: Options<CreateAccidentRecordApiV1AllAccidentsDataPostData>
) => createQueryKey("createAccidentRecordApiV1AllAccidentsDataPost", options);

/**
 * Create Accident Record
 * Create new accident data record.
 */
export const createAccidentRecordApiV1AllAccidentsDataPostOptions = (
  options: Options<CreateAccidentRecordApiV1AllAccidentsDataPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAccidentRecordApiV1AllAccidentsDataPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAccidentRecordApiV1AllAccidentsDataPostQueryKey(options),
  });
};

/**
 * Create Accident Record
 * Create new accident data record.
 */
export const createAccidentRecordApiV1AllAccidentsDataPostMutation = (
  options?: Partial<Options<CreateAccidentRecordApiV1AllAccidentsDataPostData>>
): UseMutationOptions<
  CreateAccidentRecordApiV1AllAccidentsDataPostResponse,
  CreateAccidentRecordApiV1AllAccidentsDataPostError,
  Options<CreateAccidentRecordApiV1AllAccidentsDataPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateAccidentRecordApiV1AllAccidentsDataPostResponse,
    CreateAccidentRecordApiV1AllAccidentsDataPostError,
    Options<CreateAccidentRecordApiV1AllAccidentsDataPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAccidentRecordApiV1AllAccidentsDataPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAllAccidentsCountApiV1AllAccidentsDataCountGetQueryKey = (
  options?: Options<GetAllAccidentsCountApiV1AllAccidentsDataCountGetData>
) => createQueryKey("getAllAccidentsCountApiV1AllAccidentsDataCountGet", options);

/**
 * Get All Accidents Count
 * Get total count of accident records with optional filters.
 */
export const getAllAccidentsCountApiV1AllAccidentsDataCountGetOptions = (
  options?: Options<GetAllAccidentsCountApiV1AllAccidentsDataCountGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllAccidentsCountApiV1AllAccidentsDataCountGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAllAccidentsCountApiV1AllAccidentsDataCountGetQueryKey(options),
  });
};

/**
 * Delete Accident Record
 * Delete accident record by u_id.
 */
export const deleteAccidentRecordApiV1AllAccidentsDataUIdDeleteMutation = (
  options?: Partial<Options<DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteData>>
): UseMutationOptions<
  unknown,
  DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteError,
  Options<DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteError,
    Options<DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAccidentRecordApiV1AllAccidentsDataUIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAccidentByIdApiV1AllAccidentsDataUIdGetQueryKey = (
  options: Options<GetAccidentByIdApiV1AllAccidentsDataUIdGetData>
) => createQueryKey("getAccidentByIdApiV1AllAccidentsDataUIdGet", options);

/**
 * Get Accident By Id
 * Get specific accident record by u_id.
 */
export const getAccidentByIdApiV1AllAccidentsDataUIdGetOptions = (
  options: Options<GetAccidentByIdApiV1AllAccidentsDataUIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccidentByIdApiV1AllAccidentsDataUIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccidentByIdApiV1AllAccidentsDataUIdGetQueryKey(options),
  });
};

/**
 * Update Accident Record
 * Update accident record by u_id.
 */
export const updateAccidentRecordApiV1AllAccidentsDataUIdPutMutation = (
  options?: Partial<Options<UpdateAccidentRecordApiV1AllAccidentsDataUIdPutData>>
): UseMutationOptions<
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutResponse,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutError,
  Options<UpdateAccidentRecordApiV1AllAccidentsDataUIdPutData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateAccidentRecordApiV1AllAccidentsDataUIdPutResponse,
    UpdateAccidentRecordApiV1AllAccidentsDataUIdPutError,
    Options<UpdateAccidentRecordApiV1AllAccidentsDataUIdPutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateAccidentRecordApiV1AllAccidentsDataUIdPut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAccidentScrapingStatusApiV1AccidentScrapingStatusGetQueryKey = (
  options?: Options<GetAccidentScrapingStatusApiV1AccidentScrapingStatusGetData>
) => createQueryKey("getAccidentScrapingStatusApiV1AccidentScrapingStatusGet", options);

/**
 * Get Accident Scraping Status
 * Get current accident scraping status
 */
export const getAccidentScrapingStatusApiV1AccidentScrapingStatusGetOptions = (
  options?: Options<GetAccidentScrapingStatusApiV1AccidentScrapingStatusGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccidentScrapingStatusApiV1AccidentScrapingStatusGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccidentScrapingStatusApiV1AccidentScrapingStatusGetQueryKey(options),
  });
};

export const startAccidentScrapingApiV1AccidentScrapingStartPostQueryKey = (
  options?: Options<StartAccidentScrapingApiV1AccidentScrapingStartPostData>
) => createQueryKey("startAccidentScrapingApiV1AccidentScrapingStartPost", options);

/**
 * Start Accident Scraping
 * Start accident data scraping process in background
 */
export const startAccidentScrapingApiV1AccidentScrapingStartPostOptions = (
  options?: Options<StartAccidentScrapingApiV1AccidentScrapingStartPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await startAccidentScrapingApiV1AccidentScrapingStartPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: startAccidentScrapingApiV1AccidentScrapingStartPostQueryKey(options),
  });
};

/**
 * Start Accident Scraping
 * Start accident data scraping process in background
 */
export const startAccidentScrapingApiV1AccidentScrapingStartPostMutation = (
  options?: Partial<Options<StartAccidentScrapingApiV1AccidentScrapingStartPostData>>
): UseMutationOptions<
  StartAccidentScrapingApiV1AccidentScrapingStartPostResponse,
  DefaultError,
  Options<StartAccidentScrapingApiV1AccidentScrapingStartPostData>
> => {
  const mutationOptions: UseMutationOptions<
    StartAccidentScrapingApiV1AccidentScrapingStartPostResponse,
    DefaultError,
    Options<StartAccidentScrapingApiV1AccidentScrapingStartPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await startAccidentScrapingApiV1AccidentScrapingStartPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const scrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetQueryKey = (
  options?: Options<ScrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetData>
) =>
  createQueryKey(
    "scrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGet",
    options
  );

/**
 * Scrape Daily Accident Data Sync
 * Scrape daily accident data and calculate summary statistics (synchronous - for testing)
 *
 * Note: For production use, prefer the /start endpoint which runs in background
 *
 * Returns:
 * Dict containing success message and summary data
 */
export const scrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetOptions = (
  options?: Options<ScrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await scrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGet({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      scrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetQueryKey(options),
  });
};

export const stopAccidentScrapingApiV1AccidentScrapingStopPostQueryKey = (
  options?: Options<StopAccidentScrapingApiV1AccidentScrapingStopPostData>
) => createQueryKey("stopAccidentScrapingApiV1AccidentScrapingStopPost", options);

/**
 * Stop Accident Scraping
 * Stop the current accident scraping process
 */
export const stopAccidentScrapingApiV1AccidentScrapingStopPostOptions = (
  options?: Options<StopAccidentScrapingApiV1AccidentScrapingStopPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stopAccidentScrapingApiV1AccidentScrapingStopPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stopAccidentScrapingApiV1AccidentScrapingStopPostQueryKey(options),
  });
};

/**
 * Stop Accident Scraping
 * Stop the current accident scraping process
 */
export const stopAccidentScrapingApiV1AccidentScrapingStopPostMutation = (
  options?: Partial<Options<StopAccidentScrapingApiV1AccidentScrapingStopPostData>>
): UseMutationOptions<
  StopAccidentScrapingApiV1AccidentScrapingStopPostResponse,
  DefaultError,
  Options<StopAccidentScrapingApiV1AccidentScrapingStopPostData>
> => {
  const mutationOptions: UseMutationOptions<
    StopAccidentScrapingApiV1AccidentScrapingStopPostResponse,
    DefaultError,
    Options<StopAccidentScrapingApiV1AccidentScrapingStopPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await stopAccidentScrapingApiV1AccidentScrapingStopPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readRootGetQueryKey = (options?: Options<ReadRootGetData>) =>
  createQueryKey("readRootGet", options);

/**
 * Read Root
 */
export const readRootGetOptions = (options?: Options<ReadRootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readRootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readRootGetQueryKey(options),
  });
};

export const healthCheckHealthcheckGetQueryKey = (
  options?: Options<HealthCheckHealthcheckGetData>
) => createQueryKey("healthCheckHealthcheckGet", options);

/**
 * Health Check
 */
export const healthCheckHealthcheckGetOptions = (
  options?: Options<HealthCheckHealthcheckGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheckHealthcheckGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckHealthcheckGetQueryKey(options),
  });
};
