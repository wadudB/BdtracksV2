// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "./client";
import type {
  CreateAccidentDataApiV1AccidentDataPostData,
  CreateAccidentDataApiV1AccidentDataPostErrors,
  CreateAccidentDataApiV1AccidentDataPostResponses,
  CreateAccidentRecordApiV1AllAccidentsDataPostData,
  CreateAccidentRecordApiV1AllAccidentsDataPostErrors,
  CreateAccidentRecordApiV1AllAccidentsDataPostResponses,
  CreateCommodityApiV1CommoditiesPostData,
  CreateCommodityApiV1CommoditiesPostErrors,
  CreateCommodityApiV1CommoditiesPostResponses,
  CreateLocationApiV1LocationsPostData,
  CreateLocationApiV1LocationsPostErrors,
  CreateLocationApiV1LocationsPostResponses,
  CreatePriceRecordApiV1PricesPostData,
  CreatePriceRecordApiV1PricesPostErrors,
  CreatePriceRecordApiV1PricesPostResponses,
  CreateRegionApiV1RegionsPostData,
  CreateRegionApiV1RegionsPostErrors,
  CreateRegionApiV1RegionsPostResponses,
  CreateUserApiV1UsersPostData,
  CreateUserApiV1UsersPostErrors,
  CreateUserApiV1UsersPostResponses,
  DeleteAccidentDataApiV1AccidentDataYearDeleteData,
  DeleteAccidentDataApiV1AccidentDataYearDeleteErrors,
  DeleteAccidentDataApiV1AccidentDataYearDeleteResponses,
  DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteData,
  DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteErrors,
  DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteResponses,
  DeleteCommodityApiV1CommoditiesIdDeleteData,
  DeleteCommodityApiV1CommoditiesIdDeleteErrors,
  DeleteCommodityApiV1CommoditiesIdDeleteResponses,
  DeleteLocationApiV1LocationsIdDeleteData,
  DeleteLocationApiV1LocationsIdDeleteErrors,
  DeleteLocationApiV1LocationsIdDeleteResponses,
  DeletePriceRecordApiV1PricesIdDeleteData,
  DeletePriceRecordApiV1PricesIdDeleteErrors,
  DeletePriceRecordApiV1PricesIdDeleteResponses,
  GetAccidentByIdApiV1AllAccidentsDataUIdGetData,
  GetAccidentByIdApiV1AllAccidentsDataUIdGetErrors,
  GetAccidentByIdApiV1AllAccidentsDataUIdGetResponses,
  GetAccidentDataApiV1AccidentDataGetData,
  GetAccidentDataApiV1AccidentDataGetErrors,
  GetAccidentDataApiV1AccidentDataGetResponses,
  GetAccidentDataByYearApiV1AccidentDataYearGetData,
  GetAccidentDataByYearApiV1AccidentDataYearGetErrors,
  GetAccidentDataByYearApiV1AccidentDataYearGetResponses,
  GetAccidentScrapingStatusApiV1AccidentScrapingStatusGetData,
  GetAccidentScrapingStatusApiV1AccidentScrapingStatusGetResponses,
  GetAllAccidentsCountApiV1AllAccidentsDataCountGetData,
  GetAllAccidentsCountApiV1AllAccidentsDataCountGetErrors,
  GetAllAccidentsCountApiV1AllAccidentsDataCountGetResponses,
  GetAllAccidentsDataApiV1AllAccidentsDataGetData,
  GetAllAccidentsDataApiV1AllAccidentsDataGetErrors,
  GetAllAccidentsDataApiV1AllAccidentsDataGetResponses,
  GetCommoditiesForDropdownApiV1CommoditiesDropdownGetData,
  GetCommoditiesForDropdownApiV1CommoditiesDropdownGetResponses,
  GetLocationsWithPricesApiV1LocationsWithPricesGetData,
  GetLocationsWithPricesApiV1LocationsWithPricesGetErrors,
  GetLocationsWithPricesApiV1LocationsWithPricesGetResponses,
  GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetData,
  GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetErrors,
  GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetResponses,
  GetPriceTrendsApiV1AnalyticsTrendsGetData,
  GetPriceTrendsApiV1AnalyticsTrendsGetErrors,
  GetPriceTrendsApiV1AnalyticsTrendsGetResponses,
  GetRegionalComparisonApiV1AnalyticsComparisonGetData,
  GetRegionalComparisonApiV1AnalyticsComparisonGetErrors,
  GetRegionalComparisonApiV1AnalyticsComparisonGetResponses,
  GetRegionalPricesApiV1PricesRegionsGetData,
  GetRegionalPricesApiV1PricesRegionsGetErrors,
  GetRegionalPricesApiV1PricesRegionsGetResponses,
  GetScrapingStatusApiV1ScraperStatusGetData,
  GetScrapingStatusApiV1ScraperStatusGetResponses,
  HealthCheckHealthcheckGetData,
  HealthCheckHealthcheckGetResponses,
  ReadCommoditiesApiV1CommoditiesGetData,
  ReadCommoditiesApiV1CommoditiesGetErrors,
  ReadCommoditiesApiV1CommoditiesGetResponses,
  ReadCommodityApiV1CommoditiesIdGetData,
  ReadCommodityApiV1CommoditiesIdGetErrors,
  ReadCommodityApiV1CommoditiesIdGetResponses,
  ReadLocationApiV1LocationsIdGetData,
  ReadLocationApiV1LocationsIdGetErrors,
  ReadLocationApiV1LocationsIdGetResponses,
  ReadLocationsApiV1LocationsGetData,
  ReadLocationsApiV1LocationsGetErrors,
  ReadLocationsApiV1LocationsGetResponses,
  ReadPriceRecordApiV1PricesIdGetData,
  ReadPriceRecordApiV1PricesIdGetErrors,
  ReadPriceRecordApiV1PricesIdGetResponses,
  ReadPriceRecordsApiV1PricesGetData,
  ReadPriceRecordsApiV1PricesGetErrors,
  ReadPriceRecordsApiV1PricesGetResponses,
  ReadRegionApiV1RegionsIdGetData,
  ReadRegionApiV1RegionsIdGetErrors,
  ReadRegionApiV1RegionsIdGetResponses,
  ReadRegionPricesApiV1RegionsIdPricesGetData,
  ReadRegionPricesApiV1RegionsIdPricesGetErrors,
  ReadRegionPricesApiV1RegionsIdPricesGetResponses,
  ReadRegionsApiV1RegionsGetData,
  ReadRegionsApiV1RegionsGetErrors,
  ReadRegionsApiV1RegionsGetResponses,
  ReadRootGetData,
  ReadRootGetResponses,
  ReadUserApiV1UsersIdGetData,
  ReadUserApiV1UsersIdGetErrors,
  ReadUserApiV1UsersIdGetResponses,
  ReadUsersApiV1UsersGetData,
  ReadUsersApiV1UsersGetErrors,
  ReadUsersApiV1UsersGetResponses,
  ScrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetData,
  ScrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetResponses,
  StartAccidentScrapingApiV1AccidentScrapingStartPostData,
  StartAccidentScrapingApiV1AccidentScrapingStartPostResponses,
  StartTcbScrapingApiV1ScraperStartPostData,
  StartTcbScrapingApiV1ScraperStartPostErrors,
  StartTcbScrapingApiV1ScraperStartPostResponses,
  StopAccidentScrapingApiV1AccidentScrapingStopPostData,
  StopAccidentScrapingApiV1AccidentScrapingStopPostResponses,
  StopScrapingApiV1ScraperStopPostData,
  StopScrapingApiV1ScraperStopPostResponses,
  UpdateAccidentDataApiV1AccidentDataYearPutData,
  UpdateAccidentDataApiV1AccidentDataYearPutErrors,
  UpdateAccidentDataApiV1AccidentDataYearPutResponses,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutData,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutErrors,
  UpdateAccidentRecordApiV1AllAccidentsDataUIdPutResponses,
  UpdateCommodityApiV1CommoditiesIdPutData,
  UpdateCommodityApiV1CommoditiesIdPutErrors,
  UpdateCommodityApiV1CommoditiesIdPutResponses,
  UpdateLocationApiV1LocationsIdPutData,
  UpdateLocationApiV1LocationsIdPutErrors,
  UpdateLocationApiV1LocationsIdPutResponses,
  UpdatePriceRecordApiV1PricesIdPutData,
  UpdatePriceRecordApiV1PricesIdPutErrors,
  UpdatePriceRecordApiV1PricesIdPutResponses,
} from "./types.gen";
import {
  createAccidentDataApiV1AccidentDataPostResponseTransformer,
  createAccidentRecordApiV1AllAccidentsDataPostResponseTransformer,
  createCommodityApiV1CommoditiesPostResponseTransformer,
  createLocationApiV1LocationsPostResponseTransformer,
  createPriceRecordApiV1PricesPostResponseTransformer,
  createRegionApiV1RegionsPostResponseTransformer,
  createUserApiV1UsersPostResponseTransformer,
  getAccidentByIdApiV1AllAccidentsDataUIdGetResponseTransformer,
  getAccidentDataApiV1AccidentDataGetResponseTransformer,
  getAccidentDataByYearApiV1AccidentDataYearGetResponseTransformer,
  getAllAccidentsDataApiV1AllAccidentsDataGetResponseTransformer,
  readCommoditiesApiV1CommoditiesGetResponseTransformer,
  readCommodityApiV1CommoditiesIdGetResponseTransformer,
  readLocationApiV1LocationsIdGetResponseTransformer,
  readLocationsApiV1LocationsGetResponseTransformer,
  readPriceRecordApiV1PricesIdGetResponseTransformer,
  readPriceRecordsApiV1PricesGetResponseTransformer,
  readRegionApiV1RegionsIdGetResponseTransformer,
  readRegionPricesApiV1RegionsIdPricesGetResponseTransformer,
  readRegionsApiV1RegionsGetResponseTransformer,
  readUserApiV1UsersIdGetResponseTransformer,
  readUsersApiV1UsersGetResponseTransformer,
  updateAccidentDataApiV1AccidentDataYearPutResponseTransformer,
  updateAccidentRecordApiV1AllAccidentsDataUIdPutResponseTransformer,
  updateCommodityApiV1CommoditiesIdPutResponseTransformer,
  updateLocationApiV1LocationsIdPutResponseTransformer,
  updatePriceRecordApiV1PricesIdPutResponseTransformer,
} from "./transformers.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Read Users
 * Retrieve users.
 */
export const readUsersApiV1UsersGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadUsersApiV1UsersGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadUsersApiV1UsersGetResponses,
    ReadUsersApiV1UsersGetErrors,
    ThrowOnError
  >({
    responseTransformer: readUsersApiV1UsersGetResponseTransformer,
    url: "/api/v1/users/",
    ...options,
  });
};

/**
 * Create User
 * Create new user.
 */
export const createUserApiV1UsersPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserApiV1UsersPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserApiV1UsersPostResponses,
    CreateUserApiV1UsersPostErrors,
    ThrowOnError
  >({
    responseTransformer: createUserApiV1UsersPostResponseTransformer,
    url: "/api/v1/users/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Read User
 * Get user by ID.
 */
export const readUserApiV1UsersIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadUserApiV1UsersIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ReadUserApiV1UsersIdGetResponses,
    ReadUserApiV1UsersIdGetErrors,
    ThrowOnError
  >({
    responseTransformer: readUserApiV1UsersIdGetResponseTransformer,
    url: "/api/v1/users/{id}",
    ...options,
  });
};

/**
 * Read Commodities
 * Retrieve commodities that have price records.
 */
export const readCommoditiesApiV1CommoditiesGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadCommoditiesApiV1CommoditiesGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadCommoditiesApiV1CommoditiesGetResponses,
    ReadCommoditiesApiV1CommoditiesGetErrors,
    ThrowOnError
  >({
    responseTransformer: readCommoditiesApiV1CommoditiesGetResponseTransformer,
    url: "/api/v1/commodities/",
    ...options,
  });
};

/**
 * Create Commodity
 * Create new commodity.
 */
export const createCommodityApiV1CommoditiesPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateCommodityApiV1CommoditiesPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCommodityApiV1CommoditiesPostResponses,
    CreateCommodityApiV1CommoditiesPostErrors,
    ThrowOnError
  >({
    responseTransformer: createCommodityApiV1CommoditiesPostResponseTransformer,
    url: "/api/v1/commodities/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Commodities For Dropdown
 * Get a simplified list of commodities for dropdown selection.
 */
export const getCommoditiesForDropdownApiV1CommoditiesDropdownGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetCommoditiesForDropdownApiV1CommoditiesDropdownGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCommoditiesForDropdownApiV1CommoditiesDropdownGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/commodities/dropdown",
    ...options,
  });
};

/**
 * Delete Commodity
 * Delete an commodity.
 */
export const deleteCommodityApiV1CommoditiesIdDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCommodityApiV1CommoditiesIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCommodityApiV1CommoditiesIdDeleteResponses,
    DeleteCommodityApiV1CommoditiesIdDeleteErrors,
    ThrowOnError
  >({
    url: "/api/v1/commodities/{id}",
    ...options,
  });
};

/**
 * Read Commodity
 * Get commodity by ID.
 */
export const readCommodityApiV1CommoditiesIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadCommodityApiV1CommoditiesIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCommodityApiV1CommoditiesIdGetResponses,
    ReadCommodityApiV1CommoditiesIdGetErrors,
    ThrowOnError
  >({
    responseTransformer: readCommodityApiV1CommoditiesIdGetResponseTransformer,
    url: "/api/v1/commodities/{id}",
    ...options,
  });
};

/**
 * Update Commodity
 * Update an commodity.
 */
export const updateCommodityApiV1CommoditiesIdPut = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCommodityApiV1CommoditiesIdPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCommodityApiV1CommoditiesIdPutResponses,
    UpdateCommodityApiV1CommoditiesIdPutErrors,
    ThrowOnError
  >({
    responseTransformer: updateCommodityApiV1CommoditiesIdPutResponseTransformer,
    url: "/api/v1/commodities/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Read Regions
 * Retrieve regions.
 */
export const readRegionsApiV1RegionsGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadRegionsApiV1RegionsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadRegionsApiV1RegionsGetResponses,
    ReadRegionsApiV1RegionsGetErrors,
    ThrowOnError
  >({
    responseTransformer: readRegionsApiV1RegionsGetResponseTransformer,
    url: "/api/v1/regions/",
    ...options,
  });
};

/**
 * Create Region
 * Create new region.
 */
export const createRegionApiV1RegionsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateRegionApiV1RegionsPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateRegionApiV1RegionsPostResponses,
    CreateRegionApiV1RegionsPostErrors,
    ThrowOnError
  >({
    responseTransformer: createRegionApiV1RegionsPostResponseTransformer,
    url: "/api/v1/regions/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Read Region
 * Get region by ID.
 */
export const readRegionApiV1RegionsIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadRegionApiV1RegionsIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ReadRegionApiV1RegionsIdGetResponses,
    ReadRegionApiV1RegionsIdGetErrors,
    ThrowOnError
  >({
    responseTransformer: readRegionApiV1RegionsIdGetResponseTransformer,
    url: "/api/v1/regions/{id}",
    ...options,
  });
};

/**
 * Read Region Prices
 * Get prices for a specific region.
 */
export const readRegionPricesApiV1RegionsIdPricesGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadRegionPricesApiV1RegionsIdPricesGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ReadRegionPricesApiV1RegionsIdPricesGetResponses,
    ReadRegionPricesApiV1RegionsIdPricesGetErrors,
    ThrowOnError
  >({
    responseTransformer: readRegionPricesApiV1RegionsIdPricesGetResponseTransformer,
    url: "/api/v1/regions/{id}/prices",
    ...options,
  });
};

/**
 * Read Price Records
 * Retrieve price records with filtering options.
 */
export const readPriceRecordsApiV1PricesGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadPriceRecordsApiV1PricesGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadPriceRecordsApiV1PricesGetResponses,
    ReadPriceRecordsApiV1PricesGetErrors,
    ThrowOnError
  >({
    responseTransformer: readPriceRecordsApiV1PricesGetResponseTransformer,
    url: "/api/v1/prices/",
    ...options,
  });
};

/**
 * Create Price Record
 * Create new price record.
 */
export const createPriceRecordApiV1PricesPost = <ThrowOnError extends boolean = false>(
  options: Options<CreatePriceRecordApiV1PricesPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePriceRecordApiV1PricesPostResponses,
    CreatePriceRecordApiV1PricesPostErrors,
    ThrowOnError
  >({
    responseTransformer: createPriceRecordApiV1PricesPostResponseTransformer,
    url: "/api/v1/prices/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Regional Prices
 * Get the most recent price for each region for a specific commodity, with trend analysis
 * based on the specified time window.
 */
export const getRegionalPricesApiV1PricesRegionsGet = <ThrowOnError extends boolean = false>(
  options: Options<GetRegionalPricesApiV1PricesRegionsGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRegionalPricesApiV1PricesRegionsGetResponses,
    GetRegionalPricesApiV1PricesRegionsGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/prices/regions",
    ...options,
  });
};

/**
 * Delete Price Record
 * Delete a price record.
 */
export const deletePriceRecordApiV1PricesIdDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeletePriceRecordApiV1PricesIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePriceRecordApiV1PricesIdDeleteResponses,
    DeletePriceRecordApiV1PricesIdDeleteErrors,
    ThrowOnError
  >({
    url: "/api/v1/prices/{id}",
    ...options,
  });
};

/**
 * Read Price Record
 * Get price record by ID.
 */
export const readPriceRecordApiV1PricesIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadPriceRecordApiV1PricesIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ReadPriceRecordApiV1PricesIdGetResponses,
    ReadPriceRecordApiV1PricesIdGetErrors,
    ThrowOnError
  >({
    responseTransformer: readPriceRecordApiV1PricesIdGetResponseTransformer,
    url: "/api/v1/prices/{id}",
    ...options,
  });
};

/**
 * Update Price Record
 * Update a price record.
 */
export const updatePriceRecordApiV1PricesIdPut = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePriceRecordApiV1PricesIdPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePriceRecordApiV1PricesIdPutResponses,
    UpdatePriceRecordApiV1PricesIdPutErrors,
    ThrowOnError
  >({
    responseTransformer: updatePriceRecordApiV1PricesIdPutResponseTransformer,
    url: "/api/v1/prices/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Read Locations
 * Retrieve locations.
 */
export const readLocationsApiV1LocationsGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadLocationsApiV1LocationsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadLocationsApiV1LocationsGetResponses,
    ReadLocationsApiV1LocationsGetErrors,
    ThrowOnError
  >({
    responseTransformer: readLocationsApiV1LocationsGetResponseTransformer,
    url: "/api/v1/locations/",
    ...options,
  });
};

/**
 * Create Location
 * Create new location.
 */
export const createLocationApiV1LocationsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateLocationApiV1LocationsPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateLocationApiV1LocationsPostResponses,
    CreateLocationApiV1LocationsPostErrors,
    ThrowOnError
  >({
    responseTransformer: createLocationApiV1LocationsPostResponseTransformer,
    url: "/api/v1/locations/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Locations With Prices
 * Get locations with recent price data within a geographic range.
 * Returns locations that have price records in the last N days.
 *
 * Categories can be individual database categories or grouped categories:
 * - food: includes agriculture, pulses, vegetables, spices, fish, meat, dairy, grocery, fruits, poultry
 * - energy: includes oil
 * - household: includes stationery, construction
 *
 * Can also filter by specific commodity_id to show only locations with that commodity.
 */
export const getLocationsWithPricesApiV1LocationsWithPricesGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetLocationsWithPricesApiV1LocationsWithPricesGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetLocationsWithPricesApiV1LocationsWithPricesGetResponses,
    GetLocationsWithPricesApiV1LocationsWithPricesGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/locations/with-prices",
    ...options,
  });
};

/**
 * Delete Location
 * Delete a location.
 */
export const deleteLocationApiV1LocationsIdDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLocationApiV1LocationsIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteLocationApiV1LocationsIdDeleteResponses,
    DeleteLocationApiV1LocationsIdDeleteErrors,
    ThrowOnError
  >({
    url: "/api/v1/locations/{id}",
    ...options,
  });
};

/**
 * Read Location
 * Get location by ID.
 */
export const readLocationApiV1LocationsIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadLocationApiV1LocationsIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ReadLocationApiV1LocationsIdGetResponses,
    ReadLocationApiV1LocationsIdGetErrors,
    ThrowOnError
  >({
    responseTransformer: readLocationApiV1LocationsIdGetResponseTransformer,
    url: "/api/v1/locations/{id}",
    ...options,
  });
};

/**
 * Update Location
 * Update a location.
 */
export const updateLocationApiV1LocationsIdPut = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLocationApiV1LocationsIdPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateLocationApiV1LocationsIdPutResponses,
    UpdateLocationApiV1LocationsIdPutErrors,
    ThrowOnError
  >({
    responseTransformer: updateLocationApiV1LocationsIdPutResponseTransformer,
    url: "/api/v1/locations/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Price Trends
 * Get price trends for analytics with various filtering options.
 */
export const getPriceTrendsApiV1AnalyticsTrendsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetPriceTrendsApiV1AnalyticsTrendsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetPriceTrendsApiV1AnalyticsTrendsGetResponses,
    GetPriceTrendsApiV1AnalyticsTrendsGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/analytics/trends",
    ...options,
  });
};

/**
 * Get Regional Comparison
 * Compare prices between regions for a specific commodity.
 */
export const getRegionalComparisonApiV1AnalyticsComparisonGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetRegionalComparisonApiV1AnalyticsComparisonGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRegionalComparisonApiV1AnalyticsComparisonGetResponses,
    GetRegionalComparisonApiV1AnalyticsComparisonGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/analytics/comparison",
    ...options,
  });
};

/**
 * Get Price Analysis
 * Get detailed price analysis for a commodity including:
 * - Price volatility
 * - Price trends
 * - Moving averages
 * - Seasonal patterns (if available)
 * - Min/max ranges
 */
export const getPriceAnalysisApiV1PriceAnalysisCommodityIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetResponses,
    GetPriceAnalysisApiV1PriceAnalysisCommodityIdGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/price-analysis/{commodity_id}",
    ...options,
  });
};

/**
 * Get Scraping Status
 * Get current scraping status
 */
export const getScrapingStatusApiV1ScraperStatusGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetScrapingStatusApiV1ScraperStatusGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetScrapingStatusApiV1ScraperStatusGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/scraper/status",
    ...options,
  });
};

/**
 * Start Tcb Scraping
 * Start TCB commodity price scraping process
 */
export const startTcbScrapingApiV1ScraperStartPost = <ThrowOnError extends boolean = false>(
  options?: Options<StartTcbScrapingApiV1ScraperStartPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    StartTcbScrapingApiV1ScraperStartPostResponses,
    StartTcbScrapingApiV1ScraperStartPostErrors,
    ThrowOnError
  >({
    url: "/api/v1/scraper/start",
    ...options,
  });
};

/**
 * Stop Scraping
 * Stop the current scraping process
 */
export const stopScrapingApiV1ScraperStopPost = <ThrowOnError extends boolean = false>(
  options?: Options<StopScrapingApiV1ScraperStopPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    StopScrapingApiV1ScraperStopPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/scraper/stop",
    ...options,
  });
};

/**
 * Get Accident Data
 * Retrieve accident data ordered by year descending.
 * This endpoint migrates the functionality from the old Flask /data endpoint.
 */
export const getAccidentDataApiV1AccidentDataGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccidentDataApiV1AccidentDataGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAccidentDataApiV1AccidentDataGetResponses,
    GetAccidentDataApiV1AccidentDataGetErrors,
    ThrowOnError
  >({
    responseTransformer: getAccidentDataApiV1AccidentDataGetResponseTransformer,
    url: "/api/v1/accident-data/",
    ...options,
  });
};

/**
 * Create Accident Data
 * Create new accident data record.
 */
export const createAccidentDataApiV1AccidentDataPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateAccidentDataApiV1AccidentDataPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAccidentDataApiV1AccidentDataPostResponses,
    CreateAccidentDataApiV1AccidentDataPostErrors,
    ThrowOnError
  >({
    responseTransformer: createAccidentDataApiV1AccidentDataPostResponseTransformer,
    url: "/api/v1/accident-data/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Accident Data
 * Delete accident data for a specific year.
 */
export const deleteAccidentDataApiV1AccidentDataYearDelete = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAccidentDataApiV1AccidentDataYearDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAccidentDataApiV1AccidentDataYearDeleteResponses,
    DeleteAccidentDataApiV1AccidentDataYearDeleteErrors,
    ThrowOnError
  >({
    url: "/api/v1/accident-data/{year}",
    ...options,
  });
};

/**
 * Get Accident Data By Year
 * Get accident data by specific year.
 */
export const getAccidentDataByYearApiV1AccidentDataYearGet = <ThrowOnError extends boolean = false>(
  options: Options<GetAccidentDataByYearApiV1AccidentDataYearGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAccidentDataByYearApiV1AccidentDataYearGetResponses,
    GetAccidentDataByYearApiV1AccidentDataYearGetErrors,
    ThrowOnError
  >({
    responseTransformer: getAccidentDataByYearApiV1AccidentDataYearGetResponseTransformer,
    url: "/api/v1/accident-data/{year}",
    ...options,
  });
};

/**
 * Update Accident Data
 * Update accident data for a specific year.
 */
export const updateAccidentDataApiV1AccidentDataYearPut = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAccidentDataApiV1AccidentDataYearPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAccidentDataApiV1AccidentDataYearPutResponses,
    UpdateAccidentDataApiV1AccidentDataYearPutErrors,
    ThrowOnError
  >({
    responseTransformer: updateAccidentDataApiV1AccidentDataYearPutResponseTransformer,
    url: "/api/v1/accident-data/{year}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get All Accidents Data
 * Retrieve all accidents data with pagination and optional filters.
 * Limited to maximum 50 records per request for performance.
 */
export const getAllAccidentsDataApiV1AllAccidentsDataGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllAccidentsDataApiV1AllAccidentsDataGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllAccidentsDataApiV1AllAccidentsDataGetResponses,
    GetAllAccidentsDataApiV1AllAccidentsDataGetErrors,
    ThrowOnError
  >({
    responseTransformer: getAllAccidentsDataApiV1AllAccidentsDataGetResponseTransformer,
    url: "/api/v1/all-accidents-data/",
    ...options,
  });
};

/**
 * Create Accident Record
 * Create new accident data record.
 */
export const createAccidentRecordApiV1AllAccidentsDataPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateAccidentRecordApiV1AllAccidentsDataPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAccidentRecordApiV1AllAccidentsDataPostResponses,
    CreateAccidentRecordApiV1AllAccidentsDataPostErrors,
    ThrowOnError
  >({
    responseTransformer: createAccidentRecordApiV1AllAccidentsDataPostResponseTransformer,
    url: "/api/v1/all-accidents-data/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get All Accidents Count
 * Get total count of accident records with optional filters.
 */
export const getAllAccidentsCountApiV1AllAccidentsDataCountGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllAccidentsCountApiV1AllAccidentsDataCountGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllAccidentsCountApiV1AllAccidentsDataCountGetResponses,
    GetAllAccidentsCountApiV1AllAccidentsDataCountGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/all-accidents-data/count",
    ...options,
  });
};

/**
 * Delete Accident Record
 * Delete accident record by u_id.
 */
export const deleteAccidentRecordApiV1AllAccidentsDataUIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteResponses,
    DeleteAccidentRecordApiV1AllAccidentsDataUIdDeleteErrors,
    ThrowOnError
  >({
    url: "/api/v1/all-accidents-data/{u_id}",
    ...options,
  });
};

/**
 * Get Accident By Id
 * Get specific accident record by u_id.
 */
export const getAccidentByIdApiV1AllAccidentsDataUIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetAccidentByIdApiV1AllAccidentsDataUIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAccidentByIdApiV1AllAccidentsDataUIdGetResponses,
    GetAccidentByIdApiV1AllAccidentsDataUIdGetErrors,
    ThrowOnError
  >({
    responseTransformer: getAccidentByIdApiV1AllAccidentsDataUIdGetResponseTransformer,
    url: "/api/v1/all-accidents-data/{u_id}",
    ...options,
  });
};

/**
 * Update Accident Record
 * Update accident record by u_id.
 */
export const updateAccidentRecordApiV1AllAccidentsDataUIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateAccidentRecordApiV1AllAccidentsDataUIdPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAccidentRecordApiV1AllAccidentsDataUIdPutResponses,
    UpdateAccidentRecordApiV1AllAccidentsDataUIdPutErrors,
    ThrowOnError
  >({
    responseTransformer: updateAccidentRecordApiV1AllAccidentsDataUIdPutResponseTransformer,
    url: "/api/v1/all-accidents-data/{u_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Accident Scraping Status
 * Get current accident scraping status
 */
export const getAccidentScrapingStatusApiV1AccidentScrapingStatusGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAccidentScrapingStatusApiV1AccidentScrapingStatusGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAccidentScrapingStatusApiV1AccidentScrapingStatusGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/accident-scraping/status",
    ...options,
  });
};

/**
 * Start Accident Scraping
 * Start accident data scraping process in background
 */
export const startAccidentScrapingApiV1AccidentScrapingStartPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<StartAccidentScrapingApiV1AccidentScrapingStartPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    StartAccidentScrapingApiV1AccidentScrapingStartPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/accident-scraping/start",
    ...options,
  });
};

/**
 * Scrape Daily Accident Data Sync
 * Scrape daily accident data and calculate summary statistics (synchronous - for testing)
 *
 * Note: For production use, prefer the /start endpoint which runs in background
 *
 * Returns:
 * Dict containing success message and summary data
 */
export const scrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    ScrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    ScrapeDailyAccidentDataSyncApiV1AccidentScrapingScrapeDailyAccidentDataGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/accident-scraping/scrape-daily-accident-data",
    ...options,
  });
};

/**
 * Stop Accident Scraping
 * Stop the current accident scraping process
 */
export const stopAccidentScrapingApiV1AccidentScrapingStopPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<StopAccidentScrapingApiV1AccidentScrapingStopPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    StopAccidentScrapingApiV1AccidentScrapingStopPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/accident-scraping/stop",
    ...options,
  });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadRootGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
    url: "/",
    ...options,
  });
};

/**
 * Health Check
 */
export const healthCheckHealthcheckGet = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckHealthcheckGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckHealthcheckGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/healthcheck",
    ...options,
  });
};
