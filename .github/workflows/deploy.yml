name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # Backend setup
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2

      - name: Configure Poetry
        working-directory: ./backend
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      - name: Update Poetry lock file
        working-directory: ./backend
        run: poetry lock --no-update
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: poetry install --only main
      
      - name: Generate backend requirements.txt
        working-directory: ./backend
        run: poetry export -f requirements.txt --output requirements.txt --without-hashes
      
      # Package application
      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r backend deployment/
          rm -rf deployment/backend/alembic/versions/__pycache__
          rm -rf deployment/backend/app/__pycache__
          rm -rf deployment/backend/app/*/__pycache__
          rm -rf deployment/backend/app/*/*/__pycache__
          cp -r frontend/dist deployment/frontend
          
          # Create deployment scripts
          cat > deployment/setup.sh << 'EOF'
          #!/bin/bash
          # Post-deployment setup script
          
          # Change to the directory where this script is located
          cd "$(dirname "$0")"
          
          # Create Python virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install backend dependencies
          cd backend
          pip install -r requirements.txt
          
          # Run database migrations
          # Uncomment the line below after the first deployment when your database is set up
          # alembic upgrade head
          
          # Return to the original directory
          cd ..
          EOF
          
          # Make setup script executable
          chmod +x deployment/setup.sh
          
      - name: Create deployment archive
        run: |
          tar -czvf deployment.tar.gz -C deployment .
          
      # Deploy to cPanel
      - name: Deploy to cPanel
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_USERNAME }}
          password: ${{ secrets.CPANEL_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ${{ secrets.CPANEL_PATH }}
          
      # Alternative deployment using cPanel Git Version Deployment
      - name: Deploy using cPanel Git Version Deployment (Alternative)
        if: false # Set to true if using cPanel Git Version Deployment instead of FTP
        uses: joelwmale/webhook-action@master
        with:
          url: ${{ secrets.CPANEL_WEBHOOK_URL }}
          body: '{"repository_url": "https://github.com/${{ github.repository }}"}'
      
      # Execute post-deployment script on cPanel (if SSH access is available)
      - name: Execute post-deployment script (Optional)
        if: false # Set to true if SSH access to cPanel is available and you have the right SSH key setup in GitHub secrets
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CPANEL_SSH_HOST }}
          username: ${{ secrets.CPANEL_SSH_USERNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          port: ${{ secrets.CPANEL_SSH_PORT }}
          script: |
            cd ${{ secrets.CPANEL_SERVER_DIR }}
            ./setup.sh