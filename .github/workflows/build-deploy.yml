name: Build and Deploy to cPanel

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Frontend Build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      # Create frontend environment file
      - name: Create Frontend Environment File
        run: |
          cat > ./frontend/.env << EOF
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || '/api' }}
          VITE_APP_ENV=production
          VITE_APP_DOMAIN=${{ secrets.DOMAIN_NAME }}
          EOF
      
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
      
      # Backend Build
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install Backend Dependencies with Poetry
        working-directory: ./backend
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
      
      # Create backend environment file
      - name: Create Backend Environment Files
        run: |
          # Create backend .env file with production settings
          cat > ./backend/.env << EOF
          MYSQL_SERVER=${{ secrets.DB_HOST }}
          MYSQL_PORT=${{ secrets.DB_PORT }}
          MYSQL_USER=${{ secrets.DB_USER }}
          MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }}
          MYSQL_DB=${{ secrets.DB_NAME }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          BACKEND_CORS_ORIGINS=["https://${{ secrets.DOMAIN_NAME }}"]
          DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
          EOF
      
      # Export dependencies to requirements.txt for cPanel
      - name: Export Poetry dependencies to requirements.txt
        working-directory: ./backend
        run: poetry export -f requirements.txt --output requirements.txt --without-hashes
      
      # Collect all files into a deployment package
      - name: Package application
        run: |
          mkdir -p deploy/frontend
          mkdir -p deploy/backend
          
          # Copy frontend build
          cp -r frontend/dist/* deploy/frontend/
          cp frontend/.htaccess deploy/frontend/
          
          # Copy backend files (exclude unnecessary directories)
          cp -r backend/app deploy/backend/
          cp -r backend/alembic deploy/backend/
          cp backend/alembic.ini deploy/backend/
          cp backend/requirements.txt deploy/backend/
          cp backend/.env deploy/backend/
          cp backend/cpanel_setup.py deploy/backend/
          cp backend/README.md deploy/backend/
          
          # Create a main .htaccess file for the root directory
          cat > deploy/.htaccess << EOF
          # Main domain .htaccess
          DirectoryIndex index.html index.php
          
          # Route backend requests to the backend directory
          RewriteEngine On
          RewriteRule ^api(/.*)?$ /backend/passenger_wsgi.py/$1 [P,L]
          EOF
          
          # Package everything
          cd deploy
          zip -r ../deployment.zip ./*
      
      # Deploy to cPanel using SFTP
      - name: Deploy to cPanel
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_USERNAME }}
          password: ${{ secrets.CPANEL_PASSWORD }}
          local-dir: ./deploy/
          server-dir: /public_html/${{ secrets.DEPLOY_PATH || 'staging.bdtracks.com' }}/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/venv/**
            **/__pycache__/**
      
      # Run post-deployment script to set up backend in cPanel
      - name: Run Post-Deployment Tasks
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_USERNAME }}
          password: ${{ secrets.CPANEL_PASSWORD }}
          script: |
            # Set up Python environment if it doesn't exist
            if [ ! -d ~/virtualenv/python3.12 ]; then
              mkdir -p ~/python
              /opt/cpanel/ea-python312/bin/python -m venv ~/virtualenv/python3.12
            fi
            
            # Set up backend
            cd ~/public_html/${{ secrets.DEPLOY_PATH || 'staging.bdtracks.com' }}/backend
            ~/virtualenv/python3.12/bin/python -m pip install --upgrade pip
            ~/virtualenv/python3.12/bin/python -m pip install -r requirements.txt
            
            # Run the cPanel setup script to create necessary files
            ~/virtualenv/python3.12/bin/python cpanel_setup.py
            
            # Run database migrations
            ~/virtualenv/python3.12/bin/python -m alembic upgrade head
            
            # Set proper permissions
            chmod 755 ~/public_html/${{ secrets.DEPLOY_PATH || 'staging.bdtracks.com' }}
            find ~/public_html/${{ secrets.DEPLOY_PATH || 'staging.bdtracks.com' }} -type d -exec chmod 755 {} \;
            find ~/public_html/${{ secrets.DEPLOY_PATH || 'staging.bdtracks.com' }} -type f -exec chmod 644 {} \; 